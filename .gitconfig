### https://git-scm.com/docs/git-config

[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = pull --recurse-submodules

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # List aliases
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with main
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email

  # Shows just my commits.
  mine = "!f() { git log --no-merges --author=$(git config user.email) $*; }; f"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[branch]

  # Rebase will be set to true for all tracking branches.
  autosetuprebase = always

  # Show most recently changed branches first.
  sort = -committerdate

[checkout]

	defaultRemote = origin

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true


  # No line ending output conversion is performed.
  autocrlf = input

  # Use Less for pager.
  # pager = less -R

  # Use Delta for pager.
  pager = delta

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

	newMoved = cyan dim
	oldMoved = blue dim
	newMovedAlternative = cyan italic
	oldMovedAlternative = blue italic

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[commit]

  gpgsign = true

[delta]
  max-line-length = 700
  # max-line-distance = 0.3 # better word-diff?
  syntax-theme = base16
  hyperlinks = true # i filed https://github.com/dandavison/delta/issues/362 but in 2022 i can't see brokenness in the issue nor repro weirdness. but i installed latest `less` anyway
  	                  # oh i found it. it doubles up the sha and adds some `8;;` at the end.
  					  # to fix.... install latest less (`less -V` should be >= v570). shouldn't need to set DELTA_PAGER.
  	# line-numbers = true # seems nice until you want to copypaste and they're there…
  	# navigate = true # eh. not great with short diffs.

  file-style = bold yellow ul
  file-decoration-style = yellow ol ul
  hunk-header-decoration-style = blue
  hunk-header-line-number-style = purple bold

[diff]

  # Detect copies as well as renames
  renames = copies

  # Show blocks of moved text of at least 20 alphanumeric characters differently than adds/deletes
  # https://blog.github.com/2018-04-05-git-217-released/
  colorMoved = default

[diff "bin"]

  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[fetch]

  # Before fetching, remove any remote-tracking references that no longer
  # exist on the remote.
  prune = true

[gpg]

  format = ssh

[gpg "ssh"]

  allowedSignersFile = "~/.ssh/allowed_signers"

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[include]

  # use separate file for username / github token / etc
  path = ~/.gitconfig.local

[init]

  defaultBranch = main

[interactive]

  diffFilter = delta --color-only --features=interactive

[log]

  # https://github.com/git/git/commit/acdd37769de8b0fe37a74bfc0475b63bdc55e9dc
  date = human

[merge]

  conflictstyle = diff3

  # Include summaries of merged commits in newly created merge commit messages
  log = true

  # tool = opendiff
  # renameLimit = 0

[pager]

  color = true
  difftool = true

[protocol]

  # faster git server communication.
  version = 2

[pull]

	ff = only
	default = current

[push]

  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple
  # default = current

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

  # --set-upstream on default push when no upstream tracking exists for branch.
  autoSetupRemote = true

[rebase]

  # Automatically create a temporary stash entry before the operation begins,
  # and apply it after the operation ends.
  autoStash = true

[rerere]

  enabled = 1

[stash]

  showPatch = true

[status]

  color = auto

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[gist]

  browse = yes
  extension = py
  private = yes
